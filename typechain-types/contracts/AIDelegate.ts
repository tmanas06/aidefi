/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AIDelegate {
  export type DelegateInfoStruct = {
    delegate: AddressLike;
    spendingLimit: BigNumberish;
    spentAmount: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
    allowedFunctions: string[];
  };

  export type DelegateInfoStructOutput = [
    delegate: string,
    spendingLimit: bigint,
    spentAmount: bigint,
    isActive: boolean,
    createdAt: bigint,
    allowedFunctions: string[]
  ] & {
    delegate: string;
    spendingLimit: bigint;
    spentAmount: bigint;
    isActive: boolean;
    createdAt: bigint;
    allowedFunctions: string[];
  };
}

export interface AIDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canSpend"
      | "createDelegatedAccount"
      | "deactivateDelegate"
      | "delegates"
      | "emergencyWithdraw"
      | "executeTokenTransfer"
      | "executeViaDelegate"
      | "getDelegateInfo"
      | "getOwnerDelegates"
      | "owner"
      | "ownerDelegates"
      | "renounceOwnership"
      | "resetSpentAmount"
      | "transferOwnership"
      | "updateSpendingLimit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateCreated"
      | "DelegateDeactivated"
      | "DelegateExecuted"
      | "OwnershipTransferred"
      | "SpendingLimitUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canSpend",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDelegatedAccount",
    values: [AddressLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTokenTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeViaDelegate",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerDelegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerDelegates",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetSpentAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSpendingLimit",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canSpend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDelegatedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeViaDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSpentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSpendingLimit",
    data: BytesLike
  ): Result;
}

export namespace DelegateCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    delegate: AddressLike,
    spendingLimit: BigNumberish,
    allowedFunctions: string[]
  ];
  export type OutputTuple = [
    owner: string,
    delegate: string,
    spendingLimit: bigint,
    allowedFunctions: string[]
  ];
  export interface OutputObject {
    owner: string;
    delegate: string;
    spendingLimit: bigint;
    allowedFunctions: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateDeactivatedEvent {
  export type InputTuple = [delegate: AddressLike];
  export type OutputTuple = [delegate: string];
  export interface OutputObject {
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateExecutedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
    success: boolean
  ];
  export type OutputTuple = [
    delegate: string,
    to: string,
    value: bigint,
    data: string,
    success: boolean
  ];
  export interface OutputObject {
    delegate: string;
    to: string;
    value: bigint;
    data: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendingLimitUpdatedEvent {
  export type InputTuple = [delegate: AddressLike, newLimit: BigNumberish];
  export type OutputTuple = [delegate: string, newLimit: bigint];
  export interface OutputObject {
    delegate: string;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): AIDelegate;
  waitForDeployment(): Promise<this>;

  interface: AIDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canSpend: TypedContractMethod<
    [_delegate: AddressLike, _amount: BigNumberish],
    [[boolean, bigint] & { canSpendAmount: boolean; remainingAmount: bigint }],
    "view"
  >;

  createDelegatedAccount: TypedContractMethod<
    [
      _delegate: AddressLike,
      _spendingLimit: BigNumberish,
      _allowedFunctions: string[]
    ],
    [void],
    "nonpayable"
  >;

  deactivateDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, bigint] & {
        delegate: string;
        spendingLimit: bigint;
        spentAmount: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  executeTokenTransfer: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeViaDelegate: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "payable"
  >;

  getDelegateInfo: TypedContractMethod<
    [_delegate: AddressLike],
    [AIDelegate.DelegateInfoStructOutput],
    "view"
  >;

  getOwnerDelegates: TypedContractMethod<
    [_owner: AddressLike],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerDelegates: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetSpentAmount: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSpendingLimit: TypedContractMethod<
    [_delegate: AddressLike, _newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canSpend"
  ): TypedContractMethod<
    [_delegate: AddressLike, _amount: BigNumberish],
    [[boolean, bigint] & { canSpendAmount: boolean; remainingAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDelegatedAccount"
  ): TypedContractMethod<
    [
      _delegate: AddressLike,
      _spendingLimit: BigNumberish,
      _allowedFunctions: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, bigint] & {
        delegate: string;
        spendingLimit: bigint;
        spentAmount: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTokenTransfer"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeViaDelegate"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getDelegateInfo"
  ): TypedContractMethod<
    [_delegate: AddressLike],
    [AIDelegate.DelegateInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerDelegates"
  ): TypedContractMethod<[_owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerDelegates"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetSpentAmount"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSpendingLimit"
  ): TypedContractMethod<
    [_delegate: AddressLike, _newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DelegateCreated"
  ): TypedContractEvent<
    DelegateCreatedEvent.InputTuple,
    DelegateCreatedEvent.OutputTuple,
    DelegateCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateDeactivated"
  ): TypedContractEvent<
    DelegateDeactivatedEvent.InputTuple,
    DelegateDeactivatedEvent.OutputTuple,
    DelegateDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateExecuted"
  ): TypedContractEvent<
    DelegateExecutedEvent.InputTuple,
    DelegateExecutedEvent.OutputTuple,
    DelegateExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SpendingLimitUpdated"
  ): TypedContractEvent<
    SpendingLimitUpdatedEvent.InputTuple,
    SpendingLimitUpdatedEvent.OutputTuple,
    SpendingLimitUpdatedEvent.OutputObject
  >;

  filters: {
    "DelegateCreated(address,address,uint256,string[])": TypedContractEvent<
      DelegateCreatedEvent.InputTuple,
      DelegateCreatedEvent.OutputTuple,
      DelegateCreatedEvent.OutputObject
    >;
    DelegateCreated: TypedContractEvent<
      DelegateCreatedEvent.InputTuple,
      DelegateCreatedEvent.OutputTuple,
      DelegateCreatedEvent.OutputObject
    >;

    "DelegateDeactivated(address)": TypedContractEvent<
      DelegateDeactivatedEvent.InputTuple,
      DelegateDeactivatedEvent.OutputTuple,
      DelegateDeactivatedEvent.OutputObject
    >;
    DelegateDeactivated: TypedContractEvent<
      DelegateDeactivatedEvent.InputTuple,
      DelegateDeactivatedEvent.OutputTuple,
      DelegateDeactivatedEvent.OutputObject
    >;

    "DelegateExecuted(address,address,uint256,bytes,bool)": TypedContractEvent<
      DelegateExecutedEvent.InputTuple,
      DelegateExecutedEvent.OutputTuple,
      DelegateExecutedEvent.OutputObject
    >;
    DelegateExecuted: TypedContractEvent<
      DelegateExecutedEvent.InputTuple,
      DelegateExecutedEvent.OutputTuple,
      DelegateExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SpendingLimitUpdated(address,uint256)": TypedContractEvent<
      SpendingLimitUpdatedEvent.InputTuple,
      SpendingLimitUpdatedEvent.OutputTuple,
      SpendingLimitUpdatedEvent.OutputObject
    >;
    SpendingLimitUpdated: TypedContractEvent<
      SpendingLimitUpdatedEvent.InputTuple,
      SpendingLimitUpdatedEvent.OutputTuple,
      SpendingLimitUpdatedEvent.OutputObject
    >;
  };
}
