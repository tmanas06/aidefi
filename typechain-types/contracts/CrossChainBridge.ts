/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CrossChainBridge {
  export type BridgeTransactionStruct = {
    bridgeId: BigNumberish;
    token: AddressLike;
    amount: BigNumberish;
    sourceChainId: BigNumberish;
    targetChainId: BigNumberish;
    recipient: AddressLike;
    sender: AddressLike;
    isProcessed: boolean;
    timestamp: BigNumberish;
    txHash: BytesLike;
  };

  export type BridgeTransactionStructOutput = [
    bridgeId: bigint,
    token: string,
    amount: bigint,
    sourceChainId: bigint,
    targetChainId: bigint,
    recipient: string,
    sender: string,
    isProcessed: boolean,
    timestamp: bigint,
    txHash: string
  ] & {
    bridgeId: bigint;
    token: string;
    amount: bigint;
    sourceChainId: bigint;
    targetChainId: bigint;
    recipient: string;
    sender: string;
    isProcessed: boolean;
    timestamp: bigint;
    txHash: string;
  };
}

export interface CrossChainBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSupportedChain"
      | "bridgeCounter"
      | "bridgeFee"
      | "bridges"
      | "completeBridge"
      | "emergencyWithdraw"
      | "emergencyWithdrawToken"
      | "getBridgeFee"
      | "getBridgeInfo"
      | "getSupportedChains"
      | "initiateBridge"
      | "minBridgeAmount"
      | "owner"
      | "processedTransactions"
      | "renounceOwnership"
      | "setSupportedToken"
      | "supportedChains"
      | "supportedTokens"
      | "transferOwnership"
      | "updateBridgeFee"
      | "updateMinBridgeAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeCompleted"
      | "BridgeFeeUpdated"
      | "BridgeInitiated"
      | "ChainAdded"
      | "OwnershipTransferred"
      | "TokenSupported"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSupportedChain",
    values: [BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridgeFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBridge",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateBridge",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minBridgeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinBridgeAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBridgeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinBridgeAmount",
    data: BytesLike
  ): Result;
}

export namespace BridgeCompletedEvent {
  export type InputTuple = [
    bridgeId: BigNumberish,
    txHash: BytesLike,
    targetChainId: BigNumberish
  ];
  export type OutputTuple = [
    bridgeId: bigint,
    txHash: string,
    targetChainId: bigint
  ];
  export interface OutputObject {
    bridgeId: bigint;
    txHash: string;
    targetChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeInitiatedEvent {
  export type InputTuple = [
    bridgeId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    sourceChainId: BigNumberish,
    targetChainId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    bridgeId: bigint,
    token: string,
    amount: bigint,
    sourceChainId: bigint,
    targetChainId: bigint,
    recipient: string
  ];
  export interface OutputObject {
    bridgeId: bigint;
    token: string;
    amount: bigint;
    sourceChainId: bigint;
    targetChainId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainAddedEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    name: string,
    bridgeContract: AddressLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    name: string,
    bridgeContract: string
  ];
  export interface OutputObject {
    chainId: bigint;
    name: string;
    bridgeContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSupportedEvent {
  export type InputTuple = [token: AddressLike, supported: boolean];
  export type OutputTuple = [token: string, supported: boolean];
  export interface OutputObject {
    token: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainBridge extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainBridge;
  waitForDeployment(): Promise<this>;

  interface: CrossChainBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSupportedChain: TypedContractMethod<
    [_chainId: BigNumberish, _name: string, _bridgeContract: AddressLike],
    [void],
    "nonpayable"
  >;

  bridgeCounter: TypedContractMethod<[], [bigint], "view">;

  bridgeFee: TypedContractMethod<[], [bigint], "view">;

  bridges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean,
        bigint,
        string
      ] & {
        bridgeId: bigint;
        token: string;
        amount: bigint;
        sourceChainId: bigint;
        targetChainId: bigint;
        recipient: string;
        sender: string;
        isProcessed: boolean;
        timestamp: bigint;
        txHash: string;
      }
    ],
    "view"
  >;

  completeBridge: TypedContractMethod<
    [_bridgeId: BigNumberish, _txHash: BytesLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdrawToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  getBridgeFee: TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;

  getBridgeInfo: TypedContractMethod<
    [_bridgeId: BigNumberish],
    [CrossChainBridge.BridgeTransactionStructOutput],
    "view"
  >;

  getSupportedChains: TypedContractMethod<[], [bigint[]], "view">;

  initiateBridge: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _targetChainId: BigNumberish,
      _recipient: AddressLike
    ],
    [void],
    "payable"
  >;

  minBridgeAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  processedTransactions: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setSupportedToken: TypedContractMethod<
    [_token: AddressLike, _supported: boolean],
    [void],
    "nonpayable"
  >;

  supportedChains: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, string] & {
        chainId: bigint;
        name: string;
        isActive: boolean;
        bridgeContract: string;
      }
    ],
    "view"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBridgeFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinBridgeAmount: TypedContractMethod<
    [_newMinAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSupportedChain"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _name: string, _bridgeContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean,
        bigint,
        string
      ] & {
        bridgeId: bigint;
        token: string;
        amount: bigint;
        sourceChainId: bigint;
        targetChainId: bigint;
        recipient: string;
        sender: string;
        isProcessed: boolean;
        timestamp: bigint;
        txHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeBridge"
  ): TypedContractMethod<
    [_bridgeId: BigNumberish, _txHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBridgeFee"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBridgeInfo"
  ): TypedContractMethod<
    [_bridgeId: BigNumberish],
    [CrossChainBridge.BridgeTransactionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedChains"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initiateBridge"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _targetChainId: BigNumberish,
      _recipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "minBridgeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processedTransactions"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupportedToken"
  ): TypedContractMethod<
    [_token: AddressLike, _supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedChains"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, string] & {
        chainId: bigint;
        name: string;
        isActive: boolean;
        bridgeContract: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBridgeFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinBridgeAmount"
  ): TypedContractMethod<[_newMinAmount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BridgeCompleted"
  ): TypedContractEvent<
    BridgeCompletedEvent.InputTuple,
    BridgeCompletedEvent.OutputTuple,
    BridgeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeFeeUpdated"
  ): TypedContractEvent<
    BridgeFeeUpdatedEvent.InputTuple,
    BridgeFeeUpdatedEvent.OutputTuple,
    BridgeFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeInitiated"
  ): TypedContractEvent<
    BridgeInitiatedEvent.InputTuple,
    BridgeInitiatedEvent.OutputTuple,
    BridgeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "ChainAdded"
  ): TypedContractEvent<
    ChainAddedEvent.InputTuple,
    ChainAddedEvent.OutputTuple,
    ChainAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenSupported"
  ): TypedContractEvent<
    TokenSupportedEvent.InputTuple,
    TokenSupportedEvent.OutputTuple,
    TokenSupportedEvent.OutputObject
  >;

  filters: {
    "BridgeCompleted(uint256,bytes32,uint256)": TypedContractEvent<
      BridgeCompletedEvent.InputTuple,
      BridgeCompletedEvent.OutputTuple,
      BridgeCompletedEvent.OutputObject
    >;
    BridgeCompleted: TypedContractEvent<
      BridgeCompletedEvent.InputTuple,
      BridgeCompletedEvent.OutputTuple,
      BridgeCompletedEvent.OutputObject
    >;

    "BridgeFeeUpdated(uint256,uint256)": TypedContractEvent<
      BridgeFeeUpdatedEvent.InputTuple,
      BridgeFeeUpdatedEvent.OutputTuple,
      BridgeFeeUpdatedEvent.OutputObject
    >;
    BridgeFeeUpdated: TypedContractEvent<
      BridgeFeeUpdatedEvent.InputTuple,
      BridgeFeeUpdatedEvent.OutputTuple,
      BridgeFeeUpdatedEvent.OutputObject
    >;

    "BridgeInitiated(uint256,address,uint256,uint256,uint256,address)": TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;
    BridgeInitiated: TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;

    "ChainAdded(uint256,string,address)": TypedContractEvent<
      ChainAddedEvent.InputTuple,
      ChainAddedEvent.OutputTuple,
      ChainAddedEvent.OutputObject
    >;
    ChainAdded: TypedContractEvent<
      ChainAddedEvent.InputTuple,
      ChainAddedEvent.OutputTuple,
      ChainAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenSupported(address,bool)": TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
    TokenSupported: TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
  };
}
