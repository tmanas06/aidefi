/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DelegatedAccount {
  export type SpendingLimitStruct = {
    token: AddressLike;
    amount: BigNumberish;
    spent: BigNumberish;
    resetTime: BigNumberish;
    isActive: boolean;
  };

  export type SpendingLimitStructOutput = [
    token: string,
    amount: bigint,
    spent: bigint,
    resetTime: bigint,
    isActive: boolean
  ] & {
    token: string;
    amount: bigint;
    spent: bigint;
    resetTime: bigint;
    isActive: boolean;
  };

  export type DelegatedAccountInfoStruct = {
    account: AddressLike;
    owner: AddressLike;
    limits: DelegatedAccount.SpendingLimitStruct[];
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type DelegatedAccountInfoStructOutput = [
    account: string,
    owner: string,
    limits: DelegatedAccount.SpendingLimitStructOutput[],
    isActive: boolean,
    createdAt: bigint
  ] & {
    account: string;
    owner: string;
    limits: DelegatedAccount.SpendingLimitStructOutput[];
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface DelegatedAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canSpend"
      | "createDelegatedAccount"
      | "deactivateDelegatedAccount"
      | "delegatedAccounts"
      | "executeTransaction"
      | "getDelegatedAccountInfo"
      | "getOwnerDelegatedAccounts"
      | "owner"
      | "ownerDelegatedAccounts"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateSpendingLimit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegatedAccountCreated"
      | "DelegatedAccountDeactivated"
      | "OwnershipTransferred"
      | "SpendingLimitUpdated"
      | "TransactionExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canSpend",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDelegatedAccount",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateDelegatedAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedAccountInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerDelegatedAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerDelegatedAccounts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSpendingLimit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canSpend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDelegatedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateDelegatedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerDelegatedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerDelegatedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSpendingLimit",
    data: BytesLike
  ): Result;
}

export namespace DelegatedAccountCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    delegatedAccount: AddressLike,
    tokens: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    owner: string,
    delegatedAccount: string,
    tokens: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    owner: string;
    delegatedAccount: string;
    tokens: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegatedAccountDeactivatedEvent {
  export type InputTuple = [delegatedAccount: AddressLike];
  export type OutputTuple = [delegatedAccount: string];
  export interface OutputObject {
    delegatedAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendingLimitUpdatedEvent {
  export type InputTuple = [
    delegatedAccount: AddressLike,
    token: AddressLike,
    newAmount: BigNumberish
  ];
  export type OutputTuple = [
    delegatedAccount: string,
    token: string,
    newAmount: bigint
  ];
  export interface OutputObject {
    delegatedAccount: string;
    token: string;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [
    delegatedAccount: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    delegatedAccount: string,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    delegatedAccount: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DelegatedAccount extends BaseContract {
  connect(runner?: ContractRunner | null): DelegatedAccount;
  waitForDeployment(): Promise<this>;

  interface: DelegatedAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canSpend: TypedContractMethod<
    [delegatedAccount: AddressLike, token: AddressLike, amount: BigNumberish],
    [[boolean, bigint] & { canSpendAmount: boolean; remainingAmount: bigint }],
    "view"
  >;

  createDelegatedAccount: TypedContractMethod<
    [
      delegatedAccount: AddressLike,
      tokens: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  deactivateDelegatedAccount: TypedContractMethod<
    [delegatedAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  delegatedAccounts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint] & {
        account: string;
        owner: string;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getDelegatedAccountInfo: TypedContractMethod<
    [delegatedAccount: AddressLike],
    [DelegatedAccount.DelegatedAccountInfoStructOutput],
    "view"
  >;

  getOwnerDelegatedAccounts: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerDelegatedAccounts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSpendingLimit: TypedContractMethod<
    [
      delegatedAccount: AddressLike,
      token: AddressLike,
      newAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canSpend"
  ): TypedContractMethod<
    [delegatedAccount: AddressLike, token: AddressLike, amount: BigNumberish],
    [[boolean, bigint] & { canSpendAmount: boolean; remainingAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDelegatedAccount"
  ): TypedContractMethod<
    [
      delegatedAccount: AddressLike,
      tokens: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateDelegatedAccount"
  ): TypedContractMethod<[delegatedAccount: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegatedAccounts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint] & {
        account: string;
        owner: string;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDelegatedAccountInfo"
  ): TypedContractMethod<
    [delegatedAccount: AddressLike],
    [DelegatedAccount.DelegatedAccountInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerDelegatedAccounts"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerDelegatedAccounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSpendingLimit"
  ): TypedContractMethod<
    [
      delegatedAccount: AddressLike,
      token: AddressLike,
      newAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DelegatedAccountCreated"
  ): TypedContractEvent<
    DelegatedAccountCreatedEvent.InputTuple,
    DelegatedAccountCreatedEvent.OutputTuple,
    DelegatedAccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegatedAccountDeactivated"
  ): TypedContractEvent<
    DelegatedAccountDeactivatedEvent.InputTuple,
    DelegatedAccountDeactivatedEvent.OutputTuple,
    DelegatedAccountDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SpendingLimitUpdated"
  ): TypedContractEvent<
    SpendingLimitUpdatedEvent.InputTuple,
    SpendingLimitUpdatedEvent.OutputTuple,
    SpendingLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;

  filters: {
    "DelegatedAccountCreated(address,address,address[],uint256[])": TypedContractEvent<
      DelegatedAccountCreatedEvent.InputTuple,
      DelegatedAccountCreatedEvent.OutputTuple,
      DelegatedAccountCreatedEvent.OutputObject
    >;
    DelegatedAccountCreated: TypedContractEvent<
      DelegatedAccountCreatedEvent.InputTuple,
      DelegatedAccountCreatedEvent.OutputTuple,
      DelegatedAccountCreatedEvent.OutputObject
    >;

    "DelegatedAccountDeactivated(address)": TypedContractEvent<
      DelegatedAccountDeactivatedEvent.InputTuple,
      DelegatedAccountDeactivatedEvent.OutputTuple,
      DelegatedAccountDeactivatedEvent.OutputObject
    >;
    DelegatedAccountDeactivated: TypedContractEvent<
      DelegatedAccountDeactivatedEvent.InputTuple,
      DelegatedAccountDeactivatedEvent.OutputTuple,
      DelegatedAccountDeactivatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SpendingLimitUpdated(address,address,uint256)": TypedContractEvent<
      SpendingLimitUpdatedEvent.InputTuple,
      SpendingLimitUpdatedEvent.OutputTuple,
      SpendingLimitUpdatedEvent.OutputObject
    >;
    SpendingLimitUpdated: TypedContractEvent<
      SpendingLimitUpdatedEvent.InputTuple,
      SpendingLimitUpdatedEvent.OutputTuple,
      SpendingLimitUpdatedEvent.OutputObject
    >;

    "TransactionExecuted(address,address,uint256,bytes)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
  };
}
