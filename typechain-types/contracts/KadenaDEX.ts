/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace KadenaDEX {
  export type BridgeInfoStruct = {
    token: AddressLike;
    amount: BigNumberish;
    targetChainId: BigNumberish;
    recipient: AddressLike;
    isProcessed: boolean;
    timestamp: BigNumberish;
  };

  export type BridgeInfoStructOutput = [
    token: string,
    amount: bigint,
    targetChainId: bigint,
    recipient: string,
    isProcessed: boolean,
    timestamp: bigint
  ] & {
    token: string;
    amount: bigint;
    targetChainId: bigint;
    recipient: string;
    isProcessed: boolean;
    timestamp: bigint;
  };

  export type SwapPairStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    reserveA: BigNumberish;
    reserveB: BigNumberish;
    totalSupply: BigNumberish;
    isActive: boolean;
  };

  export type SwapPairStructOutput = [
    tokenA: string,
    tokenB: string,
    reserveA: bigint,
    reserveB: bigint,
    totalSupply: bigint,
    isActive: boolean
  ] & {
    tokenA: string;
    tokenB: string;
    reserveA: bigint;
    reserveB: bigint;
    totalSupply: bigint;
    isActive: boolean;
  };
}

export interface KadenaDEXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "addToken"
      | "bridgeCounter"
      | "bridges"
      | "completeBridge"
      | "getAllTokens"
      | "getBridgeInfo"
      | "getSwapPair"
      | "initiateBridge"
      | "owner"
      | "renounceOwnership"
      | "swap"
      | "swapPairs"
      | "tokenList"
      | "tokens"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeCompleted"
      | "BridgeInitiated"
      | "LiquidityAdded"
      | "OwnershipTransferred"
      | "SwapExecuted"
      | "TokenAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBridge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateBridge",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPairs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BridgeCompletedEvent {
  export type InputTuple = [bridgeId: BigNumberish];
  export type OutputTuple = [bridgeId: bigint];
  export interface OutputObject {
    bridgeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeInitiatedEvent {
  export type InputTuple = [
    bridgeId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    targetChainId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    bridgeId: bigint,
    token: string,
    amount: bigint,
    targetChainId: bigint,
    recipient: string
  ];
  export interface OutputObject {
    bridgeId: bigint;
    token: string;
    amount: bigint;
    targetChainId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    provider: AddressLike
  ];
  export type OutputTuple = [
    tokenA: string,
    tokenB: string,
    amountA: bigint,
    amountB: bigint,
    provider: string
  ];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    amountA: bigint;
    amountB: bigint;
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    user: AddressLike
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    user: string
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [
    token: AddressLike,
    symbol: string,
    decimals: BigNumberish
  ];
  export type OutputTuple = [token: string, symbol: string, decimals: bigint];
  export interface OutputObject {
    token: string;
    symbol: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KadenaDEX extends BaseContract {
  connect(runner?: ContractRunner | null): KadenaDEX;
  waitForDeployment(): Promise<this>;

  interface: KadenaDEXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountA: BigNumberish,
      amountB: BigNumberish
    ],
    [void],
    "payable"
  >;

  addToken: TypedContractMethod<
    [tokenAddress: AddressLike, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  bridgeCounter: TypedContractMethod<[], [bigint], "view">;

  bridges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, boolean, bigint] & {
        token: string;
        amount: bigint;
        targetChainId: bigint;
        recipient: string;
        isProcessed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  completeBridge: TypedContractMethod<
    [bridgeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllTokens: TypedContractMethod<[], [string[]], "view">;

  getBridgeInfo: TypedContractMethod<
    [bridgeId: BigNumberish],
    [KadenaDEX.BridgeInfoStructOutput],
    "view"
  >;

  getSwapPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [KadenaDEX.SwapPairStructOutput],
    "view"
  >;

  initiateBridge: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetChainId: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swap: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "payable"
  >;

  swapPairs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        tokenA: string;
        tokenB: string;
        reserveA: bigint;
        reserveB: bigint;
        totalSupply: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  tokenList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokens: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean, bigint] & {
        tokenAddress: string;
        symbol: string;
        decimals: bigint;
        isActive: boolean;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountA: BigNumberish,
      amountB: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, boolean, bigint] & {
        token: string;
        amount: bigint;
        targetChainId: bigint;
        recipient: string;
        isProcessed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeBridge"
  ): TypedContractMethod<[bridgeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBridgeInfo"
  ): TypedContractMethod<
    [bridgeId: BigNumberish],
    [KadenaDEX.BridgeInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [KadenaDEX.SwapPairStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateBridge"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetChainId: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapPairs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        tokenA: string;
        tokenB: string;
        reserveA: bigint;
        reserveB: bigint;
        totalSupply: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean, bigint] & {
        tokenAddress: string;
        symbol: string;
        decimals: bigint;
        isActive: boolean;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BridgeCompleted"
  ): TypedContractEvent<
    BridgeCompletedEvent.InputTuple,
    BridgeCompletedEvent.OutputTuple,
    BridgeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeInitiated"
  ): TypedContractEvent<
    BridgeInitiatedEvent.InputTuple,
    BridgeInitiatedEvent.OutputTuple,
    BridgeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;

  filters: {
    "BridgeCompleted(uint256)": TypedContractEvent<
      BridgeCompletedEvent.InputTuple,
      BridgeCompletedEvent.OutputTuple,
      BridgeCompletedEvent.OutputObject
    >;
    BridgeCompleted: TypedContractEvent<
      BridgeCompletedEvent.InputTuple,
      BridgeCompletedEvent.OutputTuple,
      BridgeCompletedEvent.OutputObject
    >;

    "BridgeInitiated(uint256,address,uint256,uint256,address)": TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;
    BridgeInitiated: TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;

    "LiquidityAdded(address,address,uint256,uint256,address)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapExecuted(address,address,uint256,uint256,address)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "TokenAdded(address,string,uint8)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
  };
}
